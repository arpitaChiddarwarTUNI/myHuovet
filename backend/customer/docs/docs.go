// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/customer/create": {
            "post": {
                "description": "this endpoint is used to create a new customer,",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "create"
                ],
                "summary": "create a new customer",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateCustomerBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.CreateSuccessfulResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.CustomerAlreadyExistsResponse"
                        }
                    }
                }
            }
        },
        "/customer/get/{id}": {
            "get": {
                "description": "this endpoint is used to return a customer,",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "get"
                ],
                "summary": "get customer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.CustomerDB"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.CustomerNotFoundResponse"
                        }
                    }
                }
            }
        },
        "/customer/modify": {
            "put": {
                "description": "this endpoint is used to modify existing customer\nNOTE ALL PARAMETERS as strings!",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Modify"
                ],
                "summary": "modify customer",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Customer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ModifySuccessfulResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ModifyFailureResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.CustomerNotFoundResponse"
                        }
                    }
                }
            }
        },
        "/customer/remove/{id}": {
            "delete": {
                "description": "this endpoint is used to remove existing customer,",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "remove"
                ],
                "summary": "remove customer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.CustomerRemovedResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.CustomerNotFoundResponse"
                        }
                    }
                }
            }
        },
        "/customer/search/{input}": {
            "get": {
                "description": "this endpoint is used to search customer,",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "find customer and return id,firstname and lastname",
                "parameters": [
                    {
                        "type": "string",
                        "description": "search parameter",
                        "name": "input",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.CustomerSearchBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.CustomerNotFoundResponse"
                        }
                    }
                }
            }
        },
        "/customer/{id}/patients/": {
            "get": {
                "description": "this endpoint is used to return patients related to customer,",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "patient"
                ],
                "summary": "get patients related to customer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Patient"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.CustomerNotFoundResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CreateCustomerBody": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "testi@tuni.fi"
                },
                "first_name": {
                    "type": "string",
                    "example": "Elon"
                },
                "last_name": {
                    "type": "string",
                    "example": "Musk"
                },
                "municipality": {
                    "type": "string",
                    "example": "Tampere"
                },
                "phone_number": {
                    "type": "string",
                    "example": "+358 123456789"
                },
                "ssn": {
                    "type": "string",
                    "example": "010100-123A"
                },
                "street_address": {
                    "type": "string",
                    "example": "exampleavenue 2"
                },
                "zip_code": {
                    "type": "string",
                    "example": "33720"
                }
            }
        },
        "models.CreateSuccessfulResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Create successful"
                }
            }
        },
        "models.Customer": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "testi@tuni.fi"
                },
                "first_name": {
                    "type": "string",
                    "example": "Elon"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "last_name": {
                    "type": "string",
                    "example": "Musk"
                },
                "municipality": {
                    "type": "string",
                    "example": "Tampere"
                },
                "phone_number": {
                    "type": "string",
                    "example": "+358 123456789"
                },
                "ssn": {
                    "type": "string",
                    "example": "010100-123A"
                },
                "street_address": {
                    "type": "string",
                    "example": "exampleavenue 2"
                },
                "zip_code": {
                    "type": "string",
                    "example": "33720"
                }
            }
        },
        "models.CustomerAlreadyExistsResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "customer already exists"
                }
            }
        },
        "models.CustomerDB": {
            "type": "object",
            "properties": {
                "email": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "first_name": {
                    "type": "string",
                    "example": "Elon"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "last_name": {
                    "type": "string",
                    "example": "Musk"
                },
                "municipality": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "phone_number": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "ssn": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "street_address": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "zip_code": {
                    "$ref": "#/definitions/sql.NullString"
                }
            }
        },
        "models.CustomerNotFoundResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "customer not found"
                }
            }
        },
        "models.CustomerRemovedResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "remove successful"
                }
            }
        },
        "models.CustomerSearchBody": {
            "type": "object",
            "properties": {
                "search": {
                    "type": "string",
                    "example": "Musk"
                }
            }
        },
        "models.ModifyFailureResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "modify successful"
                }
            }
        },
        "models.ModifySuccessfulResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "modify successful"
                }
            }
        },
        "models.Patient": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Muppe"
                }
            }
        },
        "sql.NullString": {
            "type": "object",
            "properties": {
                "string": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if String is not NULL",
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1",
	Host:             "localhost:5002",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Huovet customer API",
	Description:      "This App is used to interact with customers. It can:\n- Create new customers\n- remove customers\n- Modify existing customers\n- Get customers",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
